---
title: "Strings"
format: html
---

```{r}
library(ggplot2)
library(tidyverse)
library(forcats)
library(stringr)

```

## Exercises

### Exercise 1: Time slots {.unnumbered}

The `courses` data includes *actual* data scraped from Mac's [class schedule](https://macadmsys.macalester.edu/macssb/customPage/page/classSchedule). (Thanks to Prof Leslie Myint for the scraping code!!)

If you want to learn how to scrape data, take COMP/STAT 212, Intermediate Data Science! NOTE: For simplicity, I removed classes that had "TBA" for the `days`.

```{r}
courses <- read.csv("https://mac-stat.github.io/data/registrar.csv")

# Check it out
head(courses)
```

Use our more familiar wrangling tools to warm up.

```{r}
# Construct a table that indicates the number of classes offered in each day/time slot
# Print only the 6 most popular time slots
courses |>
  group_by(days, time) |>
  summarize(number = n()) |>
  arrange(desc(number))


```



### Exercise 2: Prep the data {.unnumbered}

So that we can analyze it later, we want to wrangle the `courses` data:

-   Let's get some enrollment info:
    -   Split `avail_max` into 2 separate variables: `avail` and `max`.
    -   Use `avail` and `max` to define a new variable called `enroll`. HINT: You'll need `as.numeric()`
-   Split the course `number` into 3 separate variables: `dept`, `number`, and `section`. HINT: You can use `separate()` to split a variable into 3, not just 2 new variables.

Store this as `courses_clean` so that you can use it later.

```{r}
courses_w <- courses |>
  separate(avail_max, c("avail", "max"), sep = "/") |>
  mutate(enroll = as.numeric(max)-as.numeric(avail)) |>
  separate(number, c("dept", "number_section"), sep = " ") |>
  separate(number_section, c("number", "section"), sep = "-")

head(courses_w)
```



### Exercise 3: Courses by department {.unnumbered}

Using `courses_clean`...

```{r}
# Identify the 6 departments that offered the most sections
courses_w |>
  group_by(dept) |>
  summarize(sections_n = n()) |>
  arrange(desc(sections_n))


# Identify the 6 departments with the longest average course titles
courses_w |>
  group_by(dept) |>
  summarize(average_name_length = mean(str_length(name))) |>
  arrange(desc(average_name_length))

```



### Exercise 4: STAT courses {.unnumbered}

#### Part a {.unnumbered}

Get a subset of `courses_clean` that only includes courses taught by Alicia Johnson.

```{r}
courses_w |>
  filter(instructor == "Alicia Johnson")
```

#### Part b {.unnumbered}

Create a new dataset from `courses_clean`, named `stat`, that only includes STAT sections. In this dataset:

-   In the course names:

    -   Remove "Introduction to" from any name.
    -   Shorten "Statistical" to "Stat" where relevant.

-   Define a variable that records the `start_time` for the course.

-   Keep only the `number, name, start_time, enroll` columns.

-   The result should have 19 rows and 4 columns.

```{r}
stat <- courses_w |>
  filter(dept == "STAT") |>
  mutate(name = str_replace(name, "Statistical", "Stat")) |>
  mutate(name = str_replace(name, "Introduction to", ""))

head(stat)
```



### Exercise 5: More cleaning {.unnumbered}

In the next exercises, we'll dig into enrollments. Let's get the data ready for that analysis here. Make the following changes to the `courses_clean` data. Because they have different enrollment structures, and we don't want to compare apples and oranges, *remove* the following:

-   all sections in `PE` and `INTD` (interdisciplinary studies courses)

-   all music ensembles and dance practicums, i.e. all MUSI and THDA classes with numbers less than 100. HINT: `!(dept == "MUSI" & as.numeric(number) < 100)`

-   all lab sections. Be careful which variable you use here. For example, you don't want to search by "Lab" and accidentally eliminate courses with words such as "Labor".

Save the results as `enrollments` (don't overwrite `courses_clean`).

```{r}
enrollments <- courses_w |>
  filter(dept != "PE") |>
  filter(dept != "INTD") |>
  filter(!(dept == "MUSI" & as.numeric(number) < 100)) |>
  filter(str_detect(section, "L") == FALSE)

head(enrollments)

```



### Exercise 6: Enrollment & departments {.unnumbered}

Explore enrollments by department. *You* decide what research questions to focus on. Use both visual and numerical summaries.

I am curious about which departments have the most full classes (100% enrollment). Looking at the numerical summary and the graph generated in the code below, I can see that math classes have the highest percentage of spots filled, with an average enrollment of over 100% of what is allowed! Only ~50% of classes in the Chinese department are filled, making it the least percent full department at Macalester.

```{r}
enrollments |>
  mutate(percent_full = as.numeric(enroll)/as.numeric(max)) |>
  group_by(dept) |>
  summarize(avg_percent_full = mean(percent_full)) |>
  arrange(desc(avg_percent_full))

enrollments |>
  mutate(percent_full = as.numeric(enroll)/as.numeric(max)) |>
  group_by(dept) |>
  summarize(avg_percent_full = mean(percent_full)) |>
ggplot(aes(x = dept, y = avg_percent_full)) +
  geom_bar(stat = "identity") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

```
I am also curious about how many individual students each professor teaches each semester. The data does not show us students taking more than one class under the same professor, so we will have to assume that that does not happen when we conduct the analysis below.

```{r}
#We are interested in the `instructor` and `enroll` variable in this section.

enrollments |>
  group_by(instructor) |>
  summarize(students_per_instructor = sum(enroll)) |>
  arrange(desc(students_per_instructor))

enrollments |>
  group_by(instructor) |>
  summarize(students_per_instructor = sum(enroll)) |>
  arrange(desc(students_per_instructor))


# Then we attempt to make a visualization that shows variation between departments, taking into account that some professors teach in more than one department. I have created a new smaller dataset with just the necessary information to do that, as well as the teachers enrolled with each professor in each department.
enrollments_by_profdept <- enrollments |>
  group_by(dept, instructor) |>
  summarize(enrollment = sum(enroll))

```

```{r, fig.height=31, fig.width=13}

  ggplot(enrollments_by_profdept, aes(y = fct_reorder(instructor, enrollment), x = enrollment, fill = dept)) +
  geom_bar(stat = "identity") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

The above chart is more experimental than anything, in terms of color-coding professors by the departments they teach. Still, it gives a different impression, as we see that Andrew Beveridge has the most student enrollments in any one department, compared to Kiarina Kordela with the most enrollments overall. In both cases, Kyoshin Sasahara has the lowest enrollment overall, followed closely by Kathy Maxwell, who have 3 and 4 students enrolled in their classes respectively. Looking ahead at the next activity, I see that many professors are listed with a lot of enrollment because their courses are cross listed.

### Exercise 7: Enrollment & faculty {.unnumbered}

Let's now explore enrollments by instructor. In doing so, we have to be cautious of cross-listed courses that are listed under multiple different departments. Uncomment the code lines in the chunk below for an example.

::: {.callout-tip title="Commenting/Uncommenting Code"}

To comment/uncomment several lines of code at once, highlight them then click <kbd>ctrl/cmd+shift+c</kbd>.

:::

```{r}
enrollments |>
  filter(dept %in% c("STAT", "COMP"), number == 112, section == "01")
```

Notice that these are the exact same section! In order to not double count an instructor's enrollments, we can keep only the courses that have `distinct()` *combinations* of `days, time, instructor` values.  Uncomment the code lines in the chunk below.

```{r}
enrollments_2 <- enrollments |>
  distinct(days, time, instructor, .keep_all = TRUE)

# NOTE: By default this keeps the first department alphabetically
# That's fine because we won't use this to analyze department enrollments!
enrollments_2 |>
  filter(instructor == "Brianna Heggeseth", name == "Introduction to Data Science")
```

*Now*, explore enrollments by instructor. *You* decide what research questions to focus on. Use both visual and numerical summaries.

CAVEAT: The above code doesn't deal with *co-taught* courses that have more than one instructor. Thus instructors that co-taught are recorded as a pair, and their co-taught enrollments aren't added to their total enrollments. This is tough to get around with how the data were scraped as the instructor names are smushed together, not separated by a comma!

```{r, fig.height=31, fig.width=13}
# Let's try the same visualization from above that orders professors by the number of students taught and color codes by the department that they teach in.
enrollments_nocrosslist <- enrollments |>
  group_by(dept, instructor) |>
  summarize(enrollment = sum(enroll))

  ggplot(enrollments_nocrosslist, aes(y = fct_reorder(instructor, enrollment), x = enrollment, fill = dept)) +
  geom_bar(stat = "identity") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
  
enrollments |>
  group_by(dept, instructor) |>
  summarize(enrollment = sum(enroll))

```



### Optional extra practice {.unnumbered}

```{r}
# Make a bar plot showing the number of night courses by day of the week
# Use courses_clean
# I used a different data set for my courses clean data

courses_w |>
  select(time) |>
  group_by(time) |>
  summarize(n())

courses_w |>
  filter(time %in% c("6:30 - 10:00 pm", "6:45 - 8:15 pm", "7:00 - 10:00 pm", "7:00 - 8:00 pm", "7:00 - 8:30 pm", "7:00 - 9:00 pm", "7:15 - 8:45 pm")) |>
  ggplot(aes(x = days)) +
  geom_bar()


```

