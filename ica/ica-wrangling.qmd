---
title: "Wrangling"
format: html
---

### Exercise 1: `select` Practice {-}


Use `select()` to create a simplified dataset that we'll use throughout the exercises below.

-   Store this dataset as `elections_small`.
-   Only keep the following variables: `state_name`, `county_name`, `total_votes_20`, `repub_pct_20`, `dem_pct_20`, `total_votes_16`, `dem_pct_16`

```{r}
#Testing changes
# Load tidyverse & data
library(tidyverse)
elections <- read.csv("https://mac-stat.github.io/data/election_2020_county.csv")


# Define elections_small
elections_small <- elections |>
  select(state_name, county_name, total_votes_20, repub_pct_20, dem_pct_20, total_votes_16, dem_pct_16)

# Check out the first 6 rows to confirm your code did what you think it did!
head(elections_small)

```



### Exercise 2: `filter` Demo {-}

Whereas `select()` selects certain *variables* or columns, `filter()` keeps certain *units of observation* or rows relative to their outcome on certain variables. To this end, we must:

-   Identify the variable(s) that are relevant to the filter.

-   Use a "logical comparison operator" to define which values of the variable to *keep*:

    | symbol             | meaning                   |
    |:-------------------|:--------------------------|
    | `==`               | equal to                  |
    | `!=`               | not equal to              |
    | `>`                | greater than              |
    | `>=`               | greater than or equal to  |
    | `<`                | less than                 |
    | `<=`               | less than or equal to     |
    | `%in% c(???, ???)` | a list of multiple values |

-   Use quotes `""` when specifying outcomes of interest for a categorical variable.



::: {.callout-tip title="Commenting/Uncommenting Code"}

To comment/uncomment several lines of code at once, highlight them then click <kbd>ctrl/cmd+shift+c</kbd>.

:::



```{r}
# Keep only data on counties in Hawaii
elections_small |>
 filter(state_name == "Hawaii")
```

```{r}
# What does this do? This keeps only counties in Hawaii or Delaware
elections_small |>
  filter(state_name %in% c("Hawaii", "Delaware"))
```

```{r}
# Keep only data on counties where the Republican got MORE THAN 93.97% of the vote in 2020
# THINK: What variable is relevant here?
elections_small |>
  filter(repub_pct_20 > 93.97)

```

```{r}
# Keep only data on counties where the Republican got AT LEAST 93.97% of the vote in 2020
# This should have 1 more row (observation) than your answer above
elections_small |>
  filter(repub_pct_20 >= 93.97)

```

We can also filter with respect to 2 rules! Here, think what variables are relevant.

```{r}
# Keep only data on counties in Texas where the Democrat got more than 65% of the vote in 2020
# Do this 2 ways.
# Method 1: 2 filters with 1 condition each
elections_small |>
 filter(state_name == "Texas") |>
 filter(repub_pct_20 > 65)

# Method 2: 1 filter with 2 conditions
elections_small |>
 filter(state_name == "Texas", repub_pct_20 > 65)
```



### Exercise 3: `arrange` Demo {-}


`arrange()` arranges or sorts the *rows* in a dataset according to a given column or variable, in ascending or descending order:

`arrange(variable)`, `arrange(desc(variable))`

```{r}
# Arrange the counties in elections_small from lowest to highest percentage of 2020 Republican support
# Print out just the first 6 rows
elections_small |>
  arrange(repub_pct_20) |>
  head()
```

```{r}
# Arrange the counties in elections_small from highest to lowest percentage of 2020 Republican support
# Print out just the first 6 rows
elections_small |>
  arrange(desc(repub_pct_20)) |>
  head()
  
```



### Exercise 4: `mutate` Demo {-}


`mutate()` can either transform / mutate an existing variable (column), or define a new variable based on existing ones.

#### Part a {-}

```{r}
# What did this code do? It created a new variable called diff_20 that is the difference between the republican percentage and democratic percentage voting in each county
elections_small |>
  mutate(diff_20 = repub_pct_20 - dem_pct_20) |>
  head()
```

```{r}
# What did this code do? It creates a new variable called repub_votes_20 that is the total number of people in each county who voted republican in 2020
elections_small |>
  mutate(repub_votes_20 = round(total_votes_20 * repub_pct_20/100)) |>
  head()
```

```{r}
# What did this code do? It creates a new variable to test if republicans got more votes than democrats in each county, or if republicans won the county.
elections_small |>
  mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |>
  head()
```

#### Part b {-}

```{r}
# You try
# Define a variable that calculates the change in Dem support in 2020 vs 2016
elections_small |>
 mutate(dem_diff = dem_pct_20 - dem_pct_16) |>
 head()
```

```{r}
# You try
# Define a variable that determines whether the Dem support was higher in 2020 than in 2016 (TRUE/FALSE)
elections_small |>
mutate(dem_increase = (dem_pct_20 - dem_pct_16) > 0) |>
 head()
```



### Exercise 5: Pipe Series {-}

Let's now combine these verbs into a pipe series!

#### Part a {-}

::: {.callout-important title="Think then Run"}

BEFORE running the below chunk, what do you think it will produce?

I think it will give a list of counties in Wisconsin in which the democratic vote percentage was higher in 2020 than the republican percentage was in 2020, and then arrange them from counties with the most to least total votes.
:::

```{r}
elections_small |>
  filter(state_name == "Wisconsin",
         repub_pct_20 < dem_pct_20) |>
  arrange(desc(total_votes_20)) |>
  head()
```

#### Part b {-}

::: {.callout-important title="Think then Run"}

BEFORE trying, what do you think will happen if you change the order of filter and arrange:

-   the results will be the same. I think this is the case.

:::

```{r}
# Now try it. Change the order of filter and arrange below.
elections_small |>
  arrange(desc(total_votes_20)) |>
  filter(state_name == "Wisconsin",
         repub_pct_20 < dem_pct_20) |>
  head()
```

#### Part c {-}

So the order of `filter()` and `arrange()` did *not* matter -- rerranging them produces the same results. BUT what is one *advantage* of filtering before arranging? It means the computer has to process less data and will take a shorter time running the code overall. This is particularly nice I am guessing if we are working with very large data sets.

#### Part d {-}

::: {.callout-important title="Think then Run"}

BEFORE running the below chunk, what do you think it will produce? I think it will show only counties in Delaware and create a new variable for them showing if republicans won in 2020, then it will narrow the data frame to only include 4 variables.

:::

```{r}
elections_small |>
  filter(state_name == "Delaware") |>
  mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |>
  select(county_name, repub_pct_20, dem_pct_20, repub_win_20)
```

#### Part e {-}

::: {.callout-important title="Think then Run"}

BEFORE trying, what do you think will happen if you change the order of mutate and select:

2.   we'll get an error, because we can't select a variable that hasn't been created yet.

:::

```{r}
# Now try it. Change the order of mutate and select below.
elections_small |>
  filter(state_name == "Delaware") |>
  mutate(repub_win_20 = repub_pct_20 > dem_pct_20) |>
  select(county_name, repub_pct_20, dem_pct_20, repub_win_20)

# The below code did not work because the variable county_name did not exist yet
# elections_small |>
#   filter(state_name == "Delaware") |>
#   select(county_name, repub_pct_20, dem_pct_20, repub_win_20) |>
#   mutate(repub_win_20 = repub_pct_20 > dem_pct_20)

```



### Exercise 6: DIY Pipe Series {-}

We've now learned 4 of the 6 wrangling verbs: `select`, `filter`, `mutate`, `arrange.` Let's practice combining these into pipe series. Here are some hot tips:

-   Before writing any code, translate the prompt: how many distinct wrangling steps are needed and what verb do we need in each step?
-   Add each verb one at a time -- don't try writing a whole chunk at once.

#### Part a {-}

Show just the counties in Minnesota and their Democratic 2020 vote percentage, from highest to lowest. Your answer should have just 2 columns.

```{r}
elections_small |>
  filter(state_name == "Minnesota") |>
  select(county_name, dem_pct_20) |>
  arrange(desc(dem_pct_20))

```

#### Part b {-}

Create a new dataset named `mn_wi` that sorts the counties in Minnesota and Wisconsin from lowest to highest in terms of the *change* in Democratic vote percentage in 2020 vs 2016. This dataset should include the following variables (and only these variables): `state_name`, `county_name`, `dem_pct_20`, `dem_pct_16`, and a variable measuring the change in Democratic vote percentage in 2020 vs 2016.

```{r}
# Define the dataset
# Only store the results once you're confident that they're correct

mn_wi <- elections_small |>
  filter(state_name %in% c("Minnesota", "Wisconsin")) |>
  mutate(dem_diff = dem_pct_20 - dem_pct_16) |>
  select(state_name, county_name, dem_pct_20, dem_pct_16, dem_diff) |>
  arrange(desc(dem_diff))


# Check out the first 6 rows to confirm your results
head(mn_wi)

```

#### Part c {-}

Construct and discuss a plot of the county-level change in Democratic vote percent in 2020 vs 2016, and how this differs between Minnesota and Wisconsin. The plot below shows the change in Democratic support from 2016 to 2020 in Minnesota and Wisconsin respectively. The increase on average was noticeably higher in Minnesota between the two years, and both states had a positive median number of counties whose votes for democratic went up.

```{r}
ggplot(mn_wi, aes(y = dem_diff)) +
  geom_boxplot() +
  facet_wrap(~state_name)
```



### Exercise 7: `summarize` Demo {-}

6 verbs: `select`, `filter`, `arrange`, `mutate`, `summarize`, `group_by`

Let's talk about the last 2 verbs. `summarize()` (or equivalently `summarise()`) takes an entire data frame as input and outputs a single row with one or more summary statistics. For each chunk below, indicate what the code does.

```{r}
# What does this do? It gives the median value of the variable that we specify
elections_small |>
  summarize(median(repub_pct_20))
```

```{r}
# What does this do? It creates a new variable that is the median of the republican counts overall
elections_small |>
  summarize(median_repub = median(repub_pct_20))
```

```{r}
# What does this do? It creates and displays two new variables, showing the median percentage of republican votes in each county as well as the total votes all together.
elections_small |>
  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))
```



### Exercise 8: `summarize` + `group_by` demo {-}


Finally, `group_by()` groups the units of observation or rows of a data frame by a specified set of variables. Alone, this function doesn't change the appearance of our dataset or seem to do anything at all:

```{r}
elections_small |>
  group_by(state_name)
```

Though it does change the underlying structure of the dataset:

```{r}
#Check out the structure before and after group_by
elections_small |>
  class()

elections_small |>
  group_by(state_name) |>
  class()
```

Where it really shines is in partnership with `summarize()`.

```{r}
# What does this do?
# (What if we didn't use group_by?)
elections_small |>
  group_by(state_name) |>
  summarize(median_repub = median(repub_pct_20), total_votes = sum(total_votes_20))
```

::: {.callout-warning title="Reflect"}

Notice that `group_by()` with `summarize()` produces new data frame or tibble! But the units of observation are now states instead of counties within states.

:::



### Exercise 9: DIY {-}

Let's practice (some of) our 6 verbs: `select`, `filter`, `arrange`, `mutate`, `summarize`, `group_by` Remember:

-   Before writing any code, translate the given prompts: how many distinct wrangling steps are needed and what verb do we need in each step?
-   Add each verb one at a time.

#### Part a {-}

NOTE: Part a is a challenge exercise. If you get really stuck, move on to Part b which is the same overall question, but with hints.

```{r}
# Sort the *states* from the most to least total votes cast in 2020
elections_small |>
  group_by(state_name) |>
  summarize(votes2020 = sum(total_votes_20)) |>
  arrange(desc(votes2020))

```

```{r}
# In 2020, what were the total number of votes for the Democratic candidate and the total number of votes for the Republican candidate in each *state*?
elections_small |>
  group_by(state_name) |>
  summarize(repubVotes2020 = sum(repub_pct_20 * total_votes_20), demVotes2020 = sum(dem_pct_20 * total_votes_20))


```

```{r}
# What states did the Democratic candidate win in 2020?
elections_small |>
  group_by(state_name) |>
  summarize(repubVotes2020 = sum(repub_pct_20 * total_votes_20), demVotes2020 = sum(dem_pct_20 * total_votes_20)) |>
  mutate(dem_win_20 = demVotes2020 > repubVotes2020) |>
  filter(dem_win_20 == TRUE)

```

#### Part b {-}

```{r}
# Sort the states from the most to least total votes cast in 2020
# HINT: Calculate the total number of votes in each state, then sort
#COMPLETED IN PART A

```

```{r}
# In 2020, what were the total number of votes for the Democratic candidate and the total number of votes for the Republican candidate in each state?
# HINT: First calculate the number of Dem and Repub votes in each *county*
# Then group and summarize these by state
#COMPLETED IN PART A

```

```{r}
# What states did the Democratic candidate win in 2020?
# HINT: Start with the results from the previous chunk, and then keep only some rows
#COMPLETED IN PART A

```



### Exercise 10: Practice on New Data {-}

Recall the World Cup football/soccer data from TidyTuesday:

```{r}
world_cup <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-11-29/worldcups.csv")
```

You can find a codebook [here](https://github.com/rfordatascience/tidytuesday/tree/master/data/2022/2022-11-29). Use (some of) our 6 verbs (`select`, `filter`, `arrange`, `mutate`, `summarize`, `group_by`) and data viz to address the following prompts.

```{r}
# In what years did Brazil win the World Cup?
world_cup |>
  filter(winner == "Brazil") |>
  select(Years_Brazil_Won = year)

```

```{r}
# What were the 6 World Cups with the highest attendance?
world_cup |>
  arrange(desc(attendance)) |>
  head(6)

```

```{r}
# Construct a univariate plot of goals_scored (no wrangling necessary)
# This provides a visual summary of how the number of goals_scored varies from World Cup to World Cup
ggplot(world_cup, aes(x = goals_scored)) + 
  geom_bar()

```

```{r}
# Let's follow up the plot with some more precise numerical summaries
# Calculate the min, median, and max number of goals_scored across all World Cups
# NOTE: Visually compare these numerical summaries to what you observed in the plot
world_cup |>
  summarize(min(goals_scored), max(goals_scored), median(goals_scored))

```

```{r}
# Construct a bivariate plot of how the number of goals_scored in the World Cup has changed over the years
# No wrangling necessary
ggplot(world_cup, aes(x = year, y = goals_scored)) +
  geom_line()

```

```{r}
# Our above summaries might be a bit misleading.
# The number of games played at the World Cup varies.
# Construct a bivariate plot of how the typical number of goals per game has changed over the years
world_cup |>
  mutate(goals_per_game = goals_scored/games) |>
  ggplot( aes(x = year, y = goals_per_game)) +
  geom_line()

```



### Exercise 11: Practice on Your Data {-}

Return to the TidyTuesday data you're using in Homework 3. Use your new wrangling skills to play around. What new insights can you gain?!

I was using the water insecurity data, imported below:
```{r}
waterData <- tidytuesdayR::tt_load('2025-01-28')
```

```{r}
#I am interested in finding the total number of people in 2023 who did not have plumbing according to the results collected in the survey.
waterData$water_insecurity_2023 |>
  select(name, total_pop, percent_lacking_plumbing) |>
  mutate(number_wo_plumbing = total_pop * (percent_lacking_plumbing/100)) |>
  arrange(desc(number_wo_plumbing))
```

```{r}
#One last thing I will try to find is the number of people in Alaska without plumbing in counties that were surveyed
waterData$water_insecurity_2023 |>
  filter(str_detect(name, "Alaska")) |>
  select(name, total_pop, percent_lacking_plumbing) |>
  mutate(number_wo_plumbing = total_pop * (percent_lacking_plumbing/100)) |>
  summarize(AlaskaWoPlumbing = sum(number_wo_plumbing))
  
  
```




